**Core JavaScript Concepts:**

1.  What is JavaScript, and how does it differ from Java?
    JavaScript is a scripting language used for web development, while Java is a statically-typed programming language. They share some syntax similarities but are distinct languages with different purposes.
Javascript is a scripting langauge used to create interactive web pages.

2. Explain the differences between `null` and `undefined` in JavaScript.
  Undefined means the variable has been declared, but its value has not been assigned. Null means an empty value or a blank value.

3.  How does JavaScript handle asynchronous programming, and what are the different ways to handle it?
    JavaScript uses mechanisms like callbacks, promises, and async/await to handle asynchronous code execution.

4.  What is a JavaScript closure, and provide an example of its use.
    A closure is a function that retains access to its outer function's variables even after the outer function has finished executing. Example:
   
 const outerFunction = () => {
  let count = 0;

  const innerFunction = () => {
    count++;
    return count;
  };
  return innerFunction;
};
const closure = outerFunction();

console.log(closure());
console.log(closure());
console.log(closure());

5. **Question:** Explain the concept of prototypal inheritance in JavaScript and how it differs from classical inheritance.
   **Answer:** Prototypal inheritance allows objects to inherit properties and methods from other objects. It is more flexible than classical inheritance, which is based on classes.

**Advanced JavaScript Concepts:**

6.  What are the different ways to create objects in JavaScript?
    Objects can be created using object literals, constructor functions, the `class` keyword, or object creation methods like `Object.create()`.

7.  How does the `this` keyword work in JavaScript, and how is its value determined?
   `this` refers to the current execution context and can change based on how a function is called (e.g., in an object method or as a standalone function).

In an object method, this refers to the object.
Alone, this refers to the global object.
In a function, this refers to the global object.
In a function, in strict mode, this is undefined.
In an event, this refers to the element that received the event.
Methods like call(), apply(), and bind() can refer this to any object.


8. **Question:** Explain the concept of the Event Loop in JavaScript and its role in handling asynchronous code.
   **Answer:** The Event Loop manages the execution of code in JavaScript, including handling asynchronous operations via callback queues and the call stack.

9.  What is function currying in JavaScript, and why might you use it?
   Function currying is a technique where a function is transformed into a series of unary functions, each taking one argument. It is used for partial function application and creating reusable functions.
Currying in JavaScript transforms a function with multiple arguments into a nested series of functions, each taking a single argument. Currying helps you avoid passing the same variable multiple times, and it helps you create a higher order function

10.  What are JavaScript generators, and how do they differ from regular functions?
     Generators are special functions that can be paused and resumed. They are defined using the `function*` syntax and yield values using the `yield` keyword.

**Working with JavaScript Libraries and Frameworks:**

11.  What is the Document Object Model (DOM) in web development, and how is it related to JavaScript?
     The DOM represents the structured representation of an HTML document, and JavaScript can be used to manipulate and interact with it dynamically.

12.  Explain the concept of Virtual DOM in the context of libraries like React.
     The Virtual DOM is an abstraction that represents the state of the actual DOM in memory. React uses it to optimize updates and reduce direct manipulation of the DOM.

13. **Question:** How does jQuery differ from vanilla JavaScript, and why might you choose one over the other?
    **Answer:** jQuery is a library that simplifies DOM manipulation and provides cross-browser compatibility. It can be chosen for its ease of use and the convenience it offers.

14.  What is AJAX, and how does it work in JavaScript for asynchronous data retrieval?
     AJAX (Asynchronous JavaScript and XML) is a technique for making asynchronous requests to a server to retrieve or send data without reloading the entire page.

15.  What is the role of a state management library like Redux in a front-end JavaScript framework?
     Redux is used to manage the state of an application, making it predictable and easier to debug, especially in larger applications.

**JavaScript Tools and Optimization:**

16.  What is Babel, and why might you use it in a JavaScript project?
     Babel is a JavaScript compiler that allows developers to write modern JavaScript code and convert it into a version that is compatible with older browsers.

17.  What is Webpack, and how does it simplify JavaScript module bundling and optimization?
     Webpack is a module bundler that helps organize, bundle, and optimize JavaScript code and assets for web applications.

18. **Question:** Explain how JavaScript code splitting can be used to improve application performance.
    **Answer:** Code splitting involves splitting a JavaScript bundle into smaller chunks that can be loaded on-demand, reducing initial page load times.

19.  What are Web Workers in JavaScript, and how can they improve performance in web applications?
     Web Workers allow you to run JavaScript code in separate threads, enabling parallel execution and preventing blocking of the main thread for tasks like heavy computations.

20.  How can you use JavaScript profiling tools, like the Chrome DevTools profiler, to identify and optimize performance bottlenecks in your code?
     Profiling tools help analyze code execution and resource usage, enabling developers to identify and optimize areas of code that are causing performance issues.

**Modern JavaScript Features:**

21.  Explain the concepts of async/await in JavaScript, and how do they simplify asynchronous code?
     `async/await` is a syntax for writing asynchronous code in a more synchronous style, making it easier to read and maintain.

22. **Question:** What are JavaScript modules, and how do they improve code organization and maintainability?
    **Answer:** JavaScript modules are a way to encapsulate and export reusable pieces of code, promoting code organization and modularity.

23. **Question:** What are JavaScript decorators, and how can they be used to enhance classes and functions?
    **Answer:** Decorators are a feature of JavaScript that allow you to add metadata or behavior to classes and functions, often used in frameworks like Angular.

24. **Question:** Explain the concept of the Spread and Rest operators in JavaScript and provide examples of their use.
    **Answer:** The Spread operator (`...`) is used to expand an array or object, while the Rest operator (`...`) is used to collect multiple arguments into an array.

25. **Question:** What are template literals in JavaScript, and how do they differ from traditional strings?
    **Answer:** Template literals allow you to embed expressions and multiline strings within backticks (`)`, making it easier to create dynamic and readable strings.

**Error Handling and Debugging:**

26. **Question:** What is the purpose of error handling in JavaScript, and how can you handle exceptions using `try...catch` blocks?
    **Answer:** Error handling is used to gracefully handle unexpected errors in code. `try...catch` blocks allow you to catch and handle exceptions.

27. **Question:** Explain how the JavaScript `Promise` object is used for error handling and asynchronous code.
    **Answer:** Promises have `then()` and







1. Implement a function that converts a Javascript value into a JSON string.

2. Implement a function that performs a deep copy of a value, but also handles circular references.

3. Implement a function to construct a table of contents from an HTML document.

4. Implement a function to filter rows of data matching a specified requirement.

5. Implement a function that performs insertion sort.

6. Implement a function that returns a memoized version of a function which accepts any number of arguments.

7. Implement a function that acts like setInterval but returns a function to cancel the Interval.

8. Implement a function that merges two objects together

9. Implement a function to highlight text if searched terms appear within it.

10. Implement a function to recursively transform values.

11. Implement a function that determines if two values are deep equal.

12. Implement a function to highlight text if a searched term appears within it.

13. Implement a function that returns a new object after squashing the input object.

14. Implement a function that creates a resumable interval object.

15. Implement the functionality behaviour of Promise.any()

16. Implement the functionality behaviour of Promise.allSettled()

17. Implement a function that returns a memoized version of a function which accepts a single argument.

18. Implement a function that formats a list of items into a single readable string.

19. Implement a function that converts a JavaScript value into a JSON string.

20. Implement a class that can subscribe to and emit events that trigger attached callback functions.

21. Implement a debounce function that comes with a cancel method to cancel delayed invocations.

22. Implement a function to merge rows of data from the same user.

23. Implement a function that recursively flattens an array into a single level deep.

24. Implement a function that returns an object with all falsey values removed.

25. Implement a function to resolve a given value to a Promise.

26. Implement a Turtle class that moves a turtle on a 2D plane.



27. Implement a function to execute N async tasks in series.

28. Implement a promisify function that allows the original function to override the return value.

29. Implement a function to deserialize a JSON string.

30. Implement a function to convert all the keys in an object to camel case.











1) Higher order components how it will be useful
2)Call back
3)Debugger how and why ?
4)Typescript in efficient way
